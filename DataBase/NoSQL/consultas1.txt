-> "db.<nome-da-collection>"
    - .find(<filtros>, <consulta-especifica>) faz uma consulta e retorna os registros da collection

        Filtros:
        - Executar sem filtros retorna todos os registros da collection
        - Para filtrar é preciso passar um objeto com os dados para filtrar
            - Ex: db.estados.find({ regiao: "Sudeste" }) retorna todos os registros da collection com "regiao = Sudeste"
        - É possível utilizar operadores lógicos nos filtros
            - Utilize "$or" e "$and"
            - { $or: [{ filtro1: true }, { filtro2: false }] }
                - O operador lógico é usado como uma chave e seu valor é um array de objetos contendo os filtros
            - Ex1: "db.estados.find({ $or: [{ sigla: "RJ" }, { sigla: "AC" }] })" retorna os registros que possuem a sigla "RJ" ou "AC"
            - Ex2: "db.estados.find({ $and: [{ regiao: "Sudeste" }, { sigla: "RJ" }] })" retorna os registros que possuem a regiao "Sudeste" e a sigla "RJ"
        - É possível filtrar os registros que possuem um determinado atributo
            - Utilize "$exists"
            - { attr1: { $exists: true } } filtra os registros que possuem o atributo "attr1"
                - "$exists" é usado como uma chave, deve estar dentro do atributo que deseja verificar e deve receber um valor boolean
            - Ex1: "db.estados.find({ populacao: { $exists: true } })" retorna todos os registros que possuem o atributo "populacao"
            - Ex2: "db.estados.find({ populacao: { $exists: false } })" retorna todos os registros que não possuem o atributo "populacao"

        Consulta especifica:
        - Executar sem uma consulta especifica irá retornar todos os atributos do registro
        - Para fazer uma consulta e retornar apenas os atributos desejados, basta passar um objeto com os atributos desejados
            - O valor do atributo pode ser true/false ou 1/0
            - Por padrão, o atributo "_id" é sempre retornado
                - Para não retornar: { _id: false }
            - Ex1: "db.estados.find({}, { sigla: 1 })" retorna apenas o atributo "sigla" de todos os registros
            - Ex2: "db.estados.find({}, { sigla: false })" retorna todos os atributos com exceção de "sigla" de todos os registros
        - Para especificar os atributos contidos dentro um array, utilize a notação ponto
            - Ex: db.estados.find({}, { sigla: 1, "cidades.nome": 1 }) retorna os atributos "sigla" e o atributo "nome" dentro do array "cidades"
                - É preciso envolver a chave com "" por conta da notação ponto

        Métodos:
        - .pretty() faz uma consulta e retorna os registros da collection formatados para melhor visualização
        - .skip(<quantidade>) pula uma quantidade de registros e retorna o resto
            - Ex: "db.estados.find().skip(2)" pula os 2 primeiros registros e retorna o resto
        - .limit(<quantidade>) retorna uma quantidade limitada de registros a partir do primeiro
            - Ex: "db.estados.find().limit(2)" retorna os 2 primeiros registros
            
    - .findOne(<filtros>) retorna apenas 1 registro
        - É retornado sempre o primeiro registro encontrado
    - .count() retorna a quantidade de registros que a collection possui