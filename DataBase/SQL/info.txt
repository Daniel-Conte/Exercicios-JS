-> SQL(Structured Query Language) é uma linguagem RELACIONAL(tabelas) utilizada para organizar dados em TABELAS
    - É usada por SGBDs(Sistema de Gerenciamento de Banco de Dados)
        - Ex: MySQL, PostgreSQL, etc.
    - Para usar no VsCode, instale o plugin "vscode-database"

-> Estrutura:
    -> DML(Data Manipulation Language): Engloba a parte do CRUD
        - Insert
        - Select
        - Update
        - Delete

    -> DDL(Data Definition Language): Engloba a parte de criar, alterar e excluir estruturas do BD (tabelas, colunas, constraints)
        - Create
        - Alter
        - Drop

    -> DCL(Data Control Language): Engloba a parte de permissão e dar acesso ao usuário modificar o BD
        - Grant
        - Deny
        - Revoke

    -> TCL(Transation Control Language): Engloba a parte de controle de várias ações no BD ao mesmo tempo e o que fazer caso uma delas der erro ou tudo der certo
        - Begin Transation
        - Commit Transation
        - Rollback

-> Conceitos:
    -> Tabela/Relação: Armazena dados de uma área específica
        - Ex: Tabela 'Cliente' armazena dados sobre os clientes(cpf, nome, email...)
        - Possui um conjunto de colunas

    -> Colunas: Especifica os atributos da tabela
        - Ex: Tabela 'Cliente' tem as colunas: cpf, nome, email...

    -> Linhas/Tuplas: São os dados da tabela
        - Os dados seguem a ordem das colunas
        - Ex: colunas: cpf | nome | email | ...
                111.111.111-11 | 'Ana' | ana@email.com | ...

    -> Chave Primária(PK): Usada para identificar CADA linha de uma tabela
        - Cada tabela deve ter, pelo menos, uma coluna como chave primária
        - Características:
            - Única: Em uma tabela a chave primária não pode se repetir, ou seja, cada linha deve ter um PK ÚNICA
            - Não Vazia: Deve possuir um valor
            - Não Muda: O valor da PK até pode ser mudado, mas não é recomendado

        - Surrogate Key: São as chaves onde o valor delas serve somente para identificar as linhas e não tem relação com dados em si
            - Ex: Na tabela 'Cliente', os valores das PKs: 1, 2, 3 ... servem somente para identificar cada linha e não tem nada relacionado com o cliente em si
        - Natural Key: São as chaves onde o valor delas tem relação com os dados em si
            - Ex: Na tabela 'Cliente', os valores das PKs são os CPFs dos clientes, ou seja, tem relação com o cliente
        
    -> Relacionamentos: As tabelas podem se relacionar para ligar/fazer conexão com seus dados
        - Para fazer a relação, as PKs de uma tabela devem ir para a outra tabela em forma de Chave Estrangeira(FK), assim, as linhas com as FKs iguais das PKs das linhas na tabela relacionada estarão relacionadas(fazem parte do mesmo registro)

        -> 1 para 1: UMA linha desta tabela deve se relacionar somente com UMA linha da outra tabela e vice-versa
            -> A coluna da FK deve ir somente em 1 das 2 tabelas, e isso fica da sua escolha, mas coloque na tabela em que esse dado será mais acessado, assim melhorando o desempenho do BD

            UM homem é casado com UMA mulher e UMA mulher é casada com UM homem

            Tabela 'Homem'   ( 1 )
            id: PK  | nome
            ---------------
                1   | João
                2   | Vitor

            Tabela 'Mulher'  ( 1 )
            id: PK  |  nome  | homem_id: FK
            -------------------------------
                1   |  Ana  |  2
                2   |  Bia  |  1

            'homem_id' referencia o 'id' na tabela 'Homem'
            - João é casado com Bia
            - Vitor é casado com Ana

        -> 1 para Muitos (1 para N): UMA linha desta tabela pode se relacionar com 1 ou mais linhas na outra tabela
            - A coluna da FK deve ir na tabela de lado "N"(muitos)

            UMA mãe tem N (UM ou MAIS) filhos, mas UM filho só pode ter UMA mãe

            Tabela 'Mãe'   ( 1 )
            id: PK  | nome
            ---------------
                1   |  Ana
                2   |  Bia

            Tabela 'Filho'  ( N )
            id: PK  |  nome  | mae_id: FK
            -------------------------------
                1   |  João  |  1
                2   |  Gui   |  2
                3   |  Julia |  1

            'mae_id' referencia o 'id' na tabela 'Mãe'
            - João e Julia são filhos de Ana
            - Gui é filho de Bia

        -> Muitos para Muitos (N para N): Uma linha desta tabela pode se relacionar com muitas linhas da outra tabela e vice-versa
            - Nenhuma tabela recebe a coluna da FK
            - É criada uma NOVA tabela com 2 colunas FK, cada uma referenciando cada tabela (pode-se adicionar mais colunas nesta nova tabela)
                - A PK desta nova tabela será as 2 colunas FK (Chave composta)

            Um tio pode ter VÁRIOS sobrinho e um sobrinho pode ter VÁRIOS tios

            Tabela 'Tio'   ( N )
            id: PK  | nome
            ---------------
                1   |  Marcos
                2   |  Chico
                3   |  Tonho

            Tabela 'Sobrinho'  ( N )
            id: PK  |  nome
            -------------------------------
                1   |  Rodrigo
                2   |  Marta
                3   |  Jane

            Tabela 'Tio_Sobrinho'
            tio_id: PK-FK | sobrinho_id: PK-FK
            -------------------------------
                   1      |      1
                   1      |      2
                   1      |      3
                   2      |      1
                   2      |      2
                   2      |      3
                   3      |      1
                   3      |      2
                   3      |      3

            'tio_id' referencia o 'id' na tabela 'Tio'
            'sobrinho_id' referencia o 'id' na tabela 'Sobrinho'
            - As 2 colunas são FK e PK (chave composta)
                - A sequência das 2 colunas não se repete, então é possível uma PK com as 2 colunas