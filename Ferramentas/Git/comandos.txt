[ "git status" ] -> Mostra algumas informações sobre o estado atual do repositório

[ "git help" ] -> Mostra comandos gerais e uma ajuda

[ "git init" ] -> Inicia um repositório

[ "git config user.name "<seuNome>"" ] -> Adiciona um nome para as outras pessoas saberem que é você quem esta modificando o projeto
    - Isso vale SÓ para o repositório local

[ "git config user.email "<seuEmail>"" ] -> Adiciona um email para outras pessoas entrarem em contato com voce
    - Isso vale SÓ para o repositório local

[ "git config --global user.email "<seuEmail>"" ] -> Adiciona um email de forma global(Adiciona esse email para TODOS os seus repositórios)
    - Pode ser usado com "nome"

[ "git config user.nome" ] -> Mostra o nome do usuario local

[ "git config user.email" ] -> Mostra o email do usuario local

[ "git add <nomeDoArquivo>" ] -> Adiciona o arquivo para o estado "Staged"
    - O arquivo pode ser "Untracked"(o git começa a monitorar) ou "Modified"

[ "git add ." ] -> Adiciona todos os arquivos

[ "git commit -m "<nomeDoCommit>"" ] -> Comita os arquivos
    - Manda uma cópia do seu projeto para o repositório local com um nome para distinguir

[ "git log" ] -> Mostra todos os commits feitos
    - O commit que aparecer "(HEAD -> 'branch atual')" é o commit que está sendo usado agora
    - O comportamento depende do comando "pager" da pasta "config".
        - Se for "cat" todos os commits vão aparecer normalmente 
        - Se for "less"(padrao) vão aparecer commits até "encher" o tamanho do terminal, não mostrando os outros e aparecendo ":" na linha de digitar do terminal
            - Se digitar "/" e alguma letra/nome irá pesquisar o nome dos commits
            - Se digitar "q"(quit) vai sair e voltar ao normal
            - Se digitar "b"(back) vai voltar um passo
    - Para mudar de comportamento digite [ "git config core.pager <nome>" ]

[ "git log -3" ] -> Mostra os 3 ultimos commits

[ "git log --oneline" ] -> Mostra os commits resumidos, cada um em uma linha

[ "git log --before="<ano-mes-dia>"" ] -> Mostra os commits feitos antes dessa data

[ "git log --after="<ano-mes-dia>"" ] -> Mostra os commits feitos depois dessa data

[ "git log --since="2 days ago"" ] -> Mostra os commits feitos nos últimos 2 dias

[ "git log --before="1 month ago"" ] -> Mostra os commits feitos antes de 1 mes atras

[ "git log --author="<nome>"" ] -> Mostra os commits feitos por tal autor(não precisa digitar o nome completo)

[ "git help log" ] -> Mostra comandos relacionados com o "log"

[ "git checkout <IDdoCommit>" ] -> Volta no tempo para o commit desejado
    - Pode usar o ID completo ou o resumido
    - Se usar [ "git switch -" ] volta para o estado anterior
    - Fica no estado "detached HEAD" pois a HEAD(versão mais recente da branch) assume uma versão que não é a mais recente
        - Todas as alterações e commits feitos no estado "detached HEAD" vão ser experimentais(não estão associados à nenhuma branch), e, vão ser descartadas quando trocar de branch
            - Para salvar essas alterações é preciso criar uma nova branch [ "git switch -c <nomeDaNovaBranch> ]

[ "git checkout <nomeDoArquivo>" ] -> Desfaz todas as alterações não comitadas do arquivo

[ "git reset HEAD --hard" ] -> Remove todas as alterações feitas no commit atual
    - Arquivos "Untracked" não são removidos, pois não estão sendo monitorados pelo Git

[ "git reset HEAD^ --hard" ] -> Remove o commit atual e volta para o ultimo commit

[ "git mv <nomeDoArquivo> <novoNome>" ] -> Renomeia um arquivo
    - Bem melhor renomear pelo Git, pois depois de renomeado o arquivo já está pronto para commit
        - Se renomear pela interface gráfica o Git vai reconhecer o arquivo como novo(Untracked) e o nome antigo como um arquivo deletado
            - Precisa add os 2 arquivos pra "Staged"(tem que add o arquivo "deleted" pro Git reconhecer como deletado)
        
[ "git rm <nomeDoArquivo>" ] -> Remove um arquivo
    - Bem melhor deletar pelo Git, pois depois de deletado o arquivo está pronto para commit
        - Se deletar pela interface gráfica, vai precisar add o arquivo deletado pra poder fazer commit

[ "git diff <algumaCoisa>" ] -> Compara o commit atual com alguma coisa
    - Mostra as linhas e o que foi modificado nos arquivos
    - Se aparecer ":" na linha de digitação vai apertando "enter" até aparecer "(END)" para ver todas as linhas modificadas
        - Isso acontece quando tem muitas linhas
        - Cada "enter" vai mostrando 1 linha

[ "git diff --staged" ] -> Compara o commit atual com os arquivos "Staged"

[ "git diff <IDdoCommit>" ] -> Compara o commit atual com um commit desejado

[ "git diff <IDdoCommit1>..<IDdoCommit2>" ] -> Compara um commit mais velho com um mais novo
    - ".." Significa "até"
    - O primeiro commit precisa ser mais velho do que o segundo

[ "git commit --amend -m "<nomeDoCommit>"" ] -> "--amend" serve para sobrescrever o commit atual
    - Caso você se esqueceu de add um arquivo no commit ou escreveu o nome do commit errado, você pode comitar novamente(do jeito certo agora) usando "--amend", isso vai sobrescrever o commit atual

[ "git restore --staged <nomeDoArquivo>" ] -> Tira um arquivo do estado "Staged"

[ "git branch" ] -> Mostra todas as branches do seu projeto e em qual você está

[ "git branch <nomeDaNovaBranch>" ] -> Cria uma nova branch
    - Uma branch é um ramo/braço do seu projeto
    - Faz uma cópia do ramo atual que pode ser usada para realizar modificações ou criar novas funcionalidades sem alterar o ramo original
    - Arquivos/modificações só serão visiveis na branch que foram feitos
    - O ponto onde a branch original e a nova são comuns(iguais) é a BASE

[ "git checkout <nomeDaBranch>" ] -> Muda de branch
    - Ao trocar de branch, arquivos vão sumir e aparecer conforme as modificações em cada branch

[ "git checkout -b <nomeDaNovaBranch>" ] -> Cria uma nova branch e já muda pra ela

[ "git branch -d <nomeDaBranch>" ] -> Remove uma branch
    - Se não der "merge" na branch antes de remover, vai mostrar uma mensagem no console e a branch não vai ser removida

[ "git branch -D <nomeDaBranch>" ] -> Remove uma branch
    - Remove qualquer branch, mesmo se não deu merge antes

[ "git merge <nomeDaBranch>" ] -> Junta/funde a branch atual com uma outra branch
    - Os commits da outra branch são adicionados DEPOIS DO ÚLTIMO commit da branch atual

[ "git rebase <nomeDaBranch>" ] -> Junta/funde a branch atual com uma outra branch
    - Os commits da outra branch são adicionados NA BASE da branch atual com essa branch, ou seja, se foram feitos commits na branch atual depois de ter criado a branch 'A', os commits da branch 'A' serão adicionados ANTES desses commits da branch atual

[ "git clone <diretorioReposOriginal> <diretorioReposClone>" ] -> Cria um clone do repositorio na pasta desejada
    - Usando "." significa 'pasta atual'